# Define output file
$outputFile = "packages-report.txt"

# Clear the output file first
Remove-Item -Path $outputFile -ErrorAction SilentlyContinue

# Loop through each .csproj file
Get-ChildItem -Recurse -Filter *.csproj | ForEach-Object {
    $projectPath = $_.FullName
    $projectName = $_.BaseName

    # Add a section header
    Add-Content -Path $outputFile -Value "======================================================="
    Add-Content -Path $outputFile -Value "Project: $projectName"
    Add-Content -Path $outputFile -Value "Path:    $projectPath"
    Add-Content -Path $outputFile -Value "-------------------------------------------------------"

    # Run the command and store output as plain text
    $output = & dotnet list "$projectPath" package --include-transitive --verbosity quiet 2>&1

    # Write the output to file line by line
    $output | ForEach-Object {
        Add-Content -Path $outputFile -Value $_
    }

    Add-Content -Path $outputFile -Value "`r`n"  # Add blank line between projects
libcurl is a native C library and is not directly supported in .NET applications. To use it within a .NET project, it typically requires platform invocation via DllImport, or integration through a third-party NuGet package that wraps the native libraryâ€”such as CurlSharp or LibCurlNet.

These packages act as .NET bindings but still depend on a system-installed version of libcurl and use interop to invoke its functions at runtime.

Therefore, to detect any usage of libcurl in a .NET codebase, we should:

Check for references to NuGet packages like CurlSharp or LibCurlNet

Search for any use of DllImport targeting libcurl (e.g., DllImport("libcurl"))
}


$searchText = "libcurl"
$directory = "C:\Path\To\Your\Project"  # Change this to your codebase root

Get-ChildItem -Path $directory -Recurse -Include *.cs | ForEach-Object {
    $matches = Select-String -Path $_.FullName -Pattern $searchText
    if ($matches) {
        Write-Host "Found in: $($_.FullName)"
        $matches | ForEach-Object { Write-Host "  Line $($_.LineNumber): $($_.Line.Trim())" }
    }
}
Get-ChildItem -Path "C:\Your\Project\Path" -Recurse -Filter *.dll | ForEach-Object {
    $version = (Get-Item $_.FullName).VersionInfo.FileVersion
    [PSCustomObject]@{
        FileName = $_.Name
        FullPath = $_.FullName
        Version  = $version
    }
} | Format-Table -AutoSize
